% \iffalse meta-comment
%
% Copyright 2024 Charles Duan <cduan@wcl.american.edu>
%
% This program is free software: you can redistribute it and/or modify it under
% the terms of the GNU General Public License as published by the Free Software
% Foundation, either version 3 of the License, or (at your option) any later
% version.
% 
% This program is distributed in the hope that it will be useful, but WITHOUT
% ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
% FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
% details.
% 
% You should have received a copy of the GNU General Public License along with
% this program. If not, see <https://www.gnu.org/licenses/>. 
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{modbook.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{modbook}
%<*package>
    [2024/01/09 v1.0.2 Module-based textbook]
%</package>
%<*driver>
\documentclass{ltxdoc}
\usepackage{doctools}
\EnableCrossrefs
\RecordChanges
\begin{document}

\lstdefinestyle{lstDocStyleLaTeXCode}{print=false}

    \DocInput{modbook.dtx}
    \PrintChanges
\end{document}
%</driver>
%<*package>
% \fi
%
%
% \changes{v1.0.0}{2024/01/09}{Initial version}
% \changes{v1.0.1}{2024/01/16}{Improved readinghead}
% \changes{v1.0.2}{2024/03/12}{Adding deferrals and multiple choice}
%
% \GetFileInfo{modbook.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \title{Modular Casebook Management: \textsf{modbook.sty}}
% \author{Charles Duan \\ cduan@wcl.american.edu}
% \date{Version~\fileversion, \filedate}
%
% \maketitle
%
% \tableofcontents
%
% \clearpage
%
% \parindent=0pt
% \parskip=8pt
%
% \section{Introduction}
%
% This is a package for managing the compilation of a textbook made up of
% several interdependent modules. The purpose of this package is:
%
% \begin{itemize}
% \item
%   To manage cross-dependencies between parts of the textbook. For example, one
%   part may reference a case that should have been already read in the book,
%   so it should be possible to raise a warning if that case hasn't already been
%   included.
%
% \item
%   To provide formatting for standard parts of a casebook.
%
% \item
%   To permit local alterations to casebook files. This requires devising a
%   directory structure for local files, such that including a file searches
%   first for the local copy and then for default version.
%
% \item To provide ancillary packages for deferred content and multiple choice
% question formatting, described below, which may be used independently of this
% package.
% \end{itemize}
%
% The general workflow model assumed by this package is as follows. Textbooks
% are to be compiled out of cases, articles, and other materials described in
% this documentation as \emph{readings}. One or more \emph{editors} compile,
% edit, and annotate these readings, and perhaps write editorial material of
% their own. The editors arrange their work into \emph{modules}, each of which
% contains an outline and content files including readings. A \emph{compiler}
% then receives modules and arranges them into a book. The compiler may also
% wish to make changes to the editors' work.
%
%
% \StopEventually{}
%
%
%
% \section{Installation and Dependencies}
%
% The package uses \textsf{hyperref} for internal cross-references, and
% \textsf{hicite} for URL formatting and a few other things. It also requires
% the \textsf{graphicx} and \textsf{etoolbox} packages.
%
% Because \textsf{hicite} is included, you may use it for managing citations
% within the casebook as well, although this is optional.
%
%    \begin{macrocode}
\RequirePackage{etoolbox}
\RequirePackage{strings}
\RequirePackage{graphicx}
\RequirePackage[deferqs]{multichoice}
\RequirePackage[hyperfootnotes=false,hidelinks,linktoc=all,bookmarks=false]{hyperref}
\RequirePackage[journalfonts,italcase,linkurl]{hicite}
%    \end{macrocode}
%
%
% \section{Modules}
%
%
% This package uses a rigorous file hierarchy to manage the work of editors and
% compilers. At the base of the hierarchy are \emph{repositories} of content.
% Generally an editor (or team of editors) would be responsible for a single
% repository. Within each repository are \emph{modules} contained in subfolders.
%
%
% \subsection{Directory Structure}
%
% Modules contain content files consistent with the following rules:
% \begin{itemize}
% \item \meta{module}|/|\meta{module}|.tex|: The default outline of the module.
% This file should contain only section headings, \env{question} environments,
% and |\import| commands.
%
% \item \meta{module}|/intro-|\meta{module}|.tex|: The introductory text for a
% module should by convention have this name, making it convenient to determine
% whether a module has been imported into a book.\footnote{It is generally
% inadvisable to check if the \meta{module}\texttt{/}\meta{module}\texttt{.tex}
% file itself has been imported, because compilers will often not use the
% default outline when selecting parts of modules.}
%
% \item \meta{module}|/intro-|\meta{filename}|.tex|: A file containing editorial
% or introductory text (that is, text not part of a case or other reading).
%
% \item \meta{module}|/narrative-|\meta{filename}|.tex|: The same as an |intro-|
% file. (Starting a filename with |narrative-| can be used to indicate that the
% text is intended as a full standalone section, rather than as an introduction
% to another reading.)
%
% \item \meta{module}|/|\meta{filename}|-qs.tex|: A list of questions and notes
% that may follow a reading. By convention, \meta{filename} corresponds to the
% file to which the questions apply. A question file will be included inside a
% list-like environment, so items should begin with |\item|.
%
% \item \meta{module}|/|\meta{filename}|.tex|: Any other filename is assumed to
% be a reading from an external source (which should start with \cs{reading}).
% \end{itemize}
%
% \DescribeMacro\RepositoryPath \marg{path,\ldots}
%
% Provides a list of repository directories. The package will sequentially
% search through each repository given in the argument, which should be a
% comma-separated list, until it finds the module file required. The default
% path is |local,base|.
%
%    \begin{macrocode}
\newcommand\RepositoryPath[1]{\def\mbk@repo@path{#1}}
\RepositoryPath{local,base}
%    \end{macrocode}
%
%
%
% \subsection{Importing Modules}
%
%
%
% \DescribeMacro\import \meta{name}
%
% The \cs{import} command is the key command for incorporating content files
% into a casebook. It is used both in the overall book to import modules, and in
% the module files (primarily \meta{module}/\meta{module}.tex) to import content
% for each module.
%
% The macro takes one argument, which need not be surrounded by braces, similar
% to |\input|. The argument may be:
% \begin{enumerate}
% \item A content file without a module name. The file is assumed to be within
% the last-|\import|ed module.
%
% \item A content file with a module name (\meta{module}|/|\meta{filename}).
%
% \item A module name alone, in which case \meta{module}|/|\meta{module}|.tex|
% is used.
% \end{enumerate}
%
%    \begin{macrocode}
\def\import #1 {
    \find@in{/}{#1}{\mbk@import@newmod}{%
            \mbk@import@nomod{#1}
    }%
}
\make@find@in{/}
%    \end{macrocode}
%
%
%
% \subsection{Cross-Reference Expectations}
%
% Content in modules will often cross-reference material in other modules. But
% if the compiler can select and reorder the modules, these cross-references
% will become unanchored. The package thus provides several macros to manage
% cross-references. Editors should insert these macros into their module files
% as they write, enabling their modules and files to be rearranged without
% creating contextual problems.
%
% Expectations are defined based on filenames, and are met if a corresponding
% file has been \cs{import}ed into the book at the correct time. Filenames may
% be given with the module name or without. (The best practice, then, is to
% ensure that filenames are unique even across different modules.)
%
% Failures of any of the expectation assertions below will result in a warning
% and an undefined-reference warning at the end of document compilation.
%
%
% \DescribeMacro\having \marg{filename} \marg{before} \marg{after} \marg{none}
%
% Chooses a text depending on the inclusion status of \meta{filename}. If the
% file has already been \cs{import}ed, then \meta{before} is used. If the file
% is imported later, then \meta{after} is used. If the file is never imported,
% then \meta{none} is used.
%
% This macro best enables flexibility for compilers, and should be used in
% preference to the other expectation assertion macros to the extent possible.
%
\def\having#1#2#3#4{%
    \@ifundefined{mbk@reg@#1}{%
        \@ifundefined{mbk@preg@#1}{#4}{#3}%
    }{%
        #2%
    }%
}%
%
% \DescribeMacro\expected \marg{filename}
%
% Tests whether a file has been included already, and produces a warning if not.
%
%    \begin{macrocode}
\def\expected#1{%
    \@ifundefined{mbk@reg@#1}{%
        \PackageWarning{modbook}{%
            In file `\mbk@current@file',^^J%
            file `#1' was expected but not already included%
        }%
        \G@refundefinedtrue
    }{}%
}
%    \end{macrocode}
%
% \DescribeMacro\expecting \marg{filename}
%
% Tests whether a file will later be included. The test fails if the file is
% never included, or if the file was included before this command was called.
% Because it relies on the |.aux| file, this command may produce spurious
% warnings that go away on subsequent compilations.
%
%    \begin{macrocode}
\def\expecting#1{%
    \@ifundefined{mbk@reg@#1}{%
        \@ifundefined{mbk@preg@#1}{
            \PackageWarning{modbook}{%
                In file `\mbk@current@file',^^J%
                file `#1' is expected later but was not included%
            }%
            \G@refundefinedtrue
        }{}%
    }{%
        \PackageWarning{modbook}{%
            In file `\mbk@current@file',^^J%
            file `#1' is expected later but was already included%
        }%
        \gdef\@refundefined{%
            \@latex@warning@no@line{References were out of order}%
        }%
    }%
}
%    \end{macrocode}
%
% \DescribeMacro\expectnext \marg{filename}
%
% Indicates that the next imported file should match this filename. This is
% used, for example, at the end of an introductory text intended to precede a
% reading.
%
%    \begin{macrocode}
\def\expectnext#1{%
    \gdef\mbk@expectnext{#1}%
}
\let\mbk@expectnext\relax
%    \end{macrocode}
%
%
%
% \section{Formatting Content}
%
% Casebooks generally use only a few types of materials for readings, and also
% include common types of editorial content. The macros here help with
% formatting these elements consistently.
%
%
%
% \subsection{Readings}
%
% These commands are useful for formatting a reading from a case or other
% materials. Typical usage is as follows:
% \begin{quote}
% \ttfamily
% \cs{readingnote}\{Decided on the same day as \emph{Bolling v.~Sharpe}, 347
% U.S. 497 (1954).\}\\
% \cs{reading}\{Brown v. Board of Education\}\\
% \cs{readingcite}\{347 U.S. 483 (1954)\}\\
% \\
% \cs{opinion} \cs{textsc}\{Mr. Chief Justice Warren\} delivered the opinion of
% the Court.\\
% \\
% These cases come to us from the States of Kansas, South Carolina, Virginia,
% and Delaware\ldots
% \end{quote}
%
% \DescribeMacro\readingnote \marg{note-text}
%
% Adds a footnote to the reading's heading. This command \emph{must come before}
% the \cs{reading} command.
%
%    \begin{macrocode}
\def\readingnote#1{\def\mbk@readingnote{#1}}%
\let\mbk@readingnote\relax
%    \end{macrocode}
%
%
%
% \DescribeMacro\reading \oarg{short-name} \marg{name}
%
% Creates a section heading starting a reading. The title of the reading is
% given as \meta{name}, and a short Table of Contents version may be given as
% \meta{short-name}.
%
% As a convenience, if \meta{name} starts with \emph{In re} or contains
% \emph{v.}, the name (and short name) will automatically be italicized for
% being a case name.
%
%    \begin{macrocode}
\def\reading{%
    \@dblarg\mbk@oreading
}
\def\mbk@oreading[#1]#2{%
    \refstepcounter{reading}%
    \find@in{ v. }{#2}{\mbk@oreading[\emph{#1}]{\emph{#2}}\@gobbletwo}{%
        \find@start{In re }{#2}{\mbk@oreading[\emph{#1}]{\emph{#2}}\@gobble}{%
            \@test\ifx\mbk@readingnote\relax\fi{%
                \mbk@reading[#1]{#2}%
            }{%
                \mbk@reading[#1]{#2\edfootnote{\mbk@readingnote}}%
                \global\let\mbk@readingnote\relax
            }%
        }%
    }%
}
\make@find@in{ v. }
\make@find@start{In re }
%    \end{macrocode}
%
% Sectioning and Table of Contents format for readings.
%
%    \begin{macrocode}
\newcommand\mbk@reading{\@startsection{reading}{4}{\z@}%
                             {3.25ex\@plus 1ex \@minus .2ex}%
                             {1.5ex \@plus .2ex}%
                             {\centering\mbk@section@font\large\bfseries}}%
\newcommand*\l@reading{\@dottedtocline{4}{5em}{0em}}
\def\toclevel@reading{4}
\let\readingmark\@gobble
\newcommand\thereading{}%
\newcounter{reading}[subsection]
%    \end{macrocode}
%
%
% \DescribeMacro\readingcite \marg{citation}
%
% Produces a second heading line below a \cs{reading} entry, that gives the
% citation for the reading text.
%
%    \begin{macrocode}
\def\readingcite#1{%
    \vskip -1.5ex \@plus -.2ex\relax
    \begingroup
    \normalfont\normalsize\itshape
    \centering
    \emph{#1}\par
    \endgroup
    \nobreak
    \vskip 1.5ex \@plus .2ex\relax
}
%    \end{macrocode}
%
%
% \DescribeMacro\opinion \marg{text} \cs{par}
%
% Formats the line where the opinion author is given. The argument need not be
% in braces; it is terminated at the end of the paragraph.
%
%    \begin{macrocode}
\def\opinion#1\par{%
    \vskip 6pt
    \noindent \textbf{#1\unskip}\par\nobreak
}
%    \end{macrocode}
%
% \DescribeMacro\readinghead \oarg{level} \marg{text}
%
% Creates a heading inside a reading. The \meta{level} is a heading
% level, by default 1.
%
%    \begin{macrocode}
\newcommand\readinghead[2][1]{%
    \vskip 6pt
    \begin{centering}
    {\@nameuse{mbk@rhead@#1}{#2\par}}%
    \end{centering}
    \nobreak
    \vskip 6pt
}
%    \end{macrocode}
%
%
% \DescribeMacro\ReadingHeadFont \marg{level} \marg{commands}
%
% Provides font and formatting \meta{commands} associated with a heading
% \meta{level} for |\readinghead|. The commands will be placed inside a group,
% and the text to be formatted will be given as an argument to the commands.
%
% By default, reading heading level 1 is bold, and level 2 is bold italic.
%
%    \begin{macrocode}
\newcommand\ReadingHeadFont[2]{%
    \@namedef{mbk@rhead@#1}{#2}%
}
\ReadingHeadFont{1}{\bfseries}
\ReadingHeadFont{2}{\bfseries\itshape}
%    \end{macrocode}
%
%
% \subsection{Statute and Question Environments}
%
%
%
% \DescribeEnv{statute}
% Formats text for an indented statute's subsections. Statutes are typically
% formatted as indented paragraphs, with higher levels of indentation pushing
% the right margin but retaining the indentation structure. (Statutes are
% typically not formatted with hanging indentation.)
%
% This environment provides for such indentation, for the second and higher
% levels. (The first level is simply normal paragraph indentation and thus
% requires no environment.) Each paragraph should be preceded by an |\item|
% command.
%
% (This environment is currently not very well tested and ought to be improved.)
%
%    \begin{macrocode}
\newenvironment{statute}{%
    \stepcounter{statlevel}%
    \readingfont
    \list{}{%
        \def\makelabel##1{}%
        \itemindent=1.5em
        \itemsep=\parskip
        %\labelsep=\z@
        %\labelwidth=\parindent
        \partopsep=\z@
        \parsep=\z@
        \topsep=\z@
    }%
}{\endlist}
\newcounter{statlevel}
%    \end{macrocode}
%
%
%
%
%
% \DescribeEnv{questions} \oarg{title}
%
% Creates an environment for notes and questions. The title of the environment
% is by default ``Notes and Questions,'' and may be changed with the optional
% argument. If the optional argument is empty, no heading is produced.
%
% The contents of the environment should be a list with |\item| commands.
%
%    \begin{macrocode}
\newenvironment{questions}[1][Notes and Questions]{%
    \edfont
    \vskip 12pt
    \ifstrempty{#1}{}{%
        \begin{centering}
        \textbf{#1}\par
        \end{centering}
        \nobreak
        \vskip 12pt
    }%
    \list{\theqnum}{%
        % For more on these parameters, see https://www.ntg.nl/maps/11/33.pdf
        \if@chapternotenums
            \@nmbrlisttrue\def\@listctr{qnum}%
        \else
            \usecounter{qnum}%
        \fi
        \def\makelabel##1{##1.}%
        \itemsep=\parskip
        \labelwidth=\z@
        \leftmargin=\z@
        \listparindent=\parindent
        \parsep=\parskip
        \partopsep=\z@
        \topsep=\z@
        \@beginparpenalty=\@M
        \@itempenalty=\z@
        \@endparpenalty=\z@
        \itemindent=\parindent
        % For some reason, LaTeX deducts the \labelsep from the left margin of
        % the label, so it is added back here.
        \itemindent=\dimexpr \labelsep + \parindent \relax
    }%
}{\endlist}
\newcounter{qnum}[chapter]
\def\theqnum{%
    \if@chapternotenums \thechapter.\fi
    \@arabic\c@qnum
}
%    \end{macrocode}
%
%
%
%
%
% \subsection{Fonts}
%
% Two fonts are used throughout the casebook, one for editorial materials and
% one for readings. The following rules are used to distinguish the two:
% \begin{itemize}
% \item Files starting with |intro-| or |narrative-|, or files ending with
% |-qs|, are editorial material; anything else is a reading.
%
% \item Block quotes are always assumed to be readings.
%
% \item Footnotes follow their own rules, described below.
% \end{itemize}
%
% \DescribeMacro\edfont
% \DescribeMacro\readingfont
% The fonts may also be manually selected, with the commands \cs{edfont} (for
% editorial material) and \cs{readingfont} (for readings). Note that the
% \cs{readings} command \emph{does not apply the reading font}. This is because
% some editors like to include Notes or other materials with a reading-like
% heading. Such material should be included in an editorially-named file
% (|narrative-|\meta{file}|.tex|), and it will be set in the editorial font.
%
%
% \DescribeMacro\EditorialFont \marg{font-commands}
%
% Executes \meta{font-commands} for any editorial material. By default,
% editorial material is set in a sans serif font.
%
%    \begin{macrocode}
\def\EditorialFont#1{%
    \gdef\edfont{#1\edmaterialtrue}%
}
\EditorialFont{\sffamily}
%    \end{macrocode}
%
%
%
% \DescribeMacro\ReadingFont \marg{font-commands}
%
% Executes \meta{font-commands} for any reading material. By default, reading
% material is set in a serif font.
%
%    \begin{macrocode}
\def\ReadingFont#1{%
    \gdef\readingfont{#1\edmaterialfalse}%
}
\ReadingFont{\rmfamily}
%    \end{macrocode}
%
% \DescribeMacro\ifedmaterial
% A conditional for determining whether the current text is a reading or
% editorial material.
%
%    \begin{macrocode}
\newif\ifedmaterial
%    \end{macrocode}
%
% \DescribeMacro\HeaderFonts \marg{pagenum} \marg{left} \marg{right}
%
% Sets the fonts for the running header. As described below in the
% Implementation section, the running header consists of a chapter name on the
% left and the current reading on the right. By default, sans serif fonts are
% used, with the chapter set in small caps.
%
%    \begin{macrocode}
\def\HeaderFonts#1#2#3{%
    \gdef\mbk@page@headerfont{#1}%
    \gdef\mbk@left@headerfont{#2}%
    \gdef\mbk@right@headerfont{#3}%
}
\HeaderFonts{\sffamily}{\sffamily\scshape}{\sffamily}
%    \end{macrocode}
%
% \DescribeMacro \SectionFont \marg{font}
%
% Sets the fonts for section headings. By default, the roman font is used
% regardless of editorial or reading context. The \meta{font} should require no
% arguments.
%
%    \begin{macrocode}
\def\SectionFont#1{%
    \gdef\mbk@section@font{\normalfont#1}%
}
\SectionFont{\rmfamily}
%    \end{macrocode}
%
%
%
% \subsection{Footnotes}
%
% In editorial material, footnotes are assumed to also be editorial material.
% Small changes to the \cs{footnote} command must be made to accommodate this.
%
% Footnotes in readings are more complex. Sometimes the footnote is from the
% original reading, and should retain the original footnote number. In other
% cases, the reading's editor adds an explanatory footnote. Editorial footnotes
% are identified with a different footnote symbol, the editorial font, and a
% notation. Given these two types of footnotes, the usual \cs{footnote} command
% is disallowed in reading text, in favor of two separate commands described
% below.
%
% As a convenience, all footnote commands add an \unskip before them, so spaces
% before the footnote are ignored.
%
%
% \DescribeMacro\readingfootnote \marg{number} \marg{note-text}
%
% Creates a footnote from the original reading in the text. The footnote 
%
\def\readingfootnote#1{%
    \unskip
    \ifedmaterial
        \PackageError{modbook}{Reading footnote found in editorial material}{%
            Change to \string\footnote
        }%
    \fi
    \def\@thefnmark{#1}%
    \@footnotemark
    \@footnotetext
}
%
% \DescribeMacro\edfootnote \marg{note-text}
%
% Creates a footnote by the editors. Symbolic footnote marks are used, and a
% separate counter |edfnct| is created to track the marks.
%
%    \begin{macrocode}
\def\edfootnote#1{%
    \unskip
    \refstepcounter{edfnct}%
    \begingroup
    \protected@xdef\@thefnmark{\theedfnct}%
    \def\@makefnmark{\hbox{\@textsuperscript{%
        \normalfont\scriptsize\@thefnmark}}%
    }%
    \@footnotemark
    \@footnotetext{\edfont\EditorMark{#1}}%
    \endgroup
}
\newcounter{edfnct}[reading]
\def\theedfnct{\@fnsymbol\c@edfnct}
%    \end{macrocode}
%
%
% \DescribeMacro\EditorMark \marg{note-text}
%
% Transforms \meta{note-text} with an indication that the text originated from
% an editor. By default, this just appends ``---Eds.'', and the macro can be
% redefined as desired.
%
%    \begin{macrocode}
\def\EditorMark#1{#1 ---Eds.}
%    \end{macrocode}
%
%
% \DescribeMacro\footnote \marg{note-text}
%
% Regular footnotes can only be used in editorial material, and are editorial
% material themselves.
%
%    \begin{macrocode}
\let\mbk@footnote\footnote
\long\def\footnote#1{%
    \unskip
    \ifedmaterial\else
        \PackageError{modbook}{%
            Footnote used in non-editorial material.^^J%
            You should use \noexpand\edfootnote or \noexpand\readingfootnote^^J%
            instead here.%
        }{%
            Change the footnote command%
        }%
    \fi
    \mbk@footnote{\edfont #1}%
}
%    \end{macrocode}
%
%
%
%
%
%
% \subsection{Graphics}
%
% The following commands are provided for inclusion of graphics. Graphics files
% may be located either in a module directory or in a separate \texttt{images}
% directory in a repository. The extension \texttt{.png}, \texttt{.jpg}, or
% \texttt{.pdf} may be omitted from the filename.
%
%
% \DescribeMacro\usegraphic \oarg{options} \marg{filename}
%
% Include a graphic in the current position inline with text. The \meta{options}
% are those options available for the |\includegraphics| command of the
% \textsf{graphicx} package.
%
%    \begin{macrocode}
\newcommand\usegraphic[2][]{%
    \expandafter\mbk@usegraphic\mbk@repo@path,\@nil{#1}{#2}%
    \mbk@try@file@default
    \PackageError{modbook}{Graphic `#2.[jpg,png]' not found}{Add the graphic}%
    \mbk@try@file@end
}
\def\mbk@usegraphic#1,#2\@nil#3#4{%
    \mbk@try@graphic{#1/\mbk@module@cur/#4.png}{#3}%
    \mbk@try@graphic{#1/\mbk@module@cur/#4.jpg}{#3}%
    \mbk@try@graphic{#1/\mbk@module@cur/#4.pdf}{#3}%
    \mbk@try@graphic{#1/\mbk@graphicsdir/#4.png}{#3}%
    \mbk@try@graphic{#1/\mbk@graphicsdir/#4.jpg}{#3}%
    \mbk@try@graphic{#1/\mbk@graphicsdir/#4.pdf}{#3}%
    % These are tried as a last resort
    \find@in{.}{#4}{%
        \mbk@try@graphic{#1/\mbk@module@cur/#4}{#3}%
        \mbk@try@graphic{#1/\mbk@graphicsdir/#4}{#3}%
        \@gobbletwo
    }{}%
    \ifstrempty{#2}{}{\mbk@usegraphic#2\@nil{#3}{#4}}%
}
%    \end{macrocode}
%
% By default, graphics take up a maximum of 30\% of the text height and 80\% of
% the text width. The optional argument to any of the graphics inclusion macros
% can change that.
%
%    \begin{macrocode}
\def\mbk@try@graphic#1#2{%
    \mbk@try@file{#1}{%
        \includegraphics[
            height=0.3\textheight,width=0.8\textwidth,
            keepaspectratio,
            #2,
        ]{#1}%
    }%
}
%    \end{macrocode}
%
% \DescribeMacro\heregraphic \oarg{options} \marg{filename}
%
% Centers the graphic at the current position in the text.
%
%    \begin{macrocode}
\newcommand\heregraphic[2][]{%
    \begin{center}
        \usegraphic[#1]{#2}%
    \end{center}
}
%    \end{macrocode}
%
%
%
% \DescribeMacro\captionedgraphic \oarg{options} \marg{filename} \marg{caption}
%
% Places the graphic in a floating figure with a caption. A cross-reference
% label of |f:|\meta{filename} is automatically attached to the figure number.
%
%    \begin{macrocode}
\newcommand\captionedgraphic[3][]{%
    \begin{figure}
    \heregraphic[#1]{#2}%
    \caption{#3}%
    \label{f:#2}%
    \end{figure}
}
%    \end{macrocode}
%
% Because captions are always editorial material (unless specified otherwise),
% they are displayed in the editorial font.
%
%    \begin{macrocode}
\long\def\@makecaption#1#2{%
  \vskip\abovecaptionskip
  \begingroup
      \edfont
      \sbox\@tempboxa{\textbf{#1}: #2}%
      \ifdim \wd\@tempboxa >\hsize
        \textbf{#1}: #2\par
      \else
        \global \@minipagefalse
        \hb@xt@\hsize{\hfil\box\@tempboxa\hfil}%
      \fi
  \endgroup
  \vskip\belowcaptionskip}
%    \end{macrocode}
%
% \DescribeMacro\GraphicsDirectory \marg{directory}
%
% Specifies the directory within repositories where images may be found. By
% default, it is \texttt{images}.
%
%    \begin{macrocode}
\def\GraphicsDirectory#1{\gdef\mbk@graphicsdir{#1}}
\GraphicsDirectory{images}
%    \end{macrocode}
%
%
%
%
%
% \subsection{Multiple Choice Questions}
%
% The |multichoice| question is included in this package, with question deferral
% turned on. This enables adding multiple choice questions throughout the text,
% with all the questions for a chapter being displayed at the end for example.
%
%
% Questions will be displayed in a manner consistent with the rest of the book.
%
%    \begin{macrocode}
\DeferralSurround{mch@questions}{%
    \edfont
    \protected@edef\reserved@a{%
        \noexpand\deferral{mch@answers}{%
            \noexpand\section*{Chapter \thechapter}%
        }%
    }\reserved@a
    \begin{questions}[Questions (Answers in the back of the book)]%
}{\end{questions}}
%
%
%
%
% \section{Implementation}
%
% The remaining text describes internal operations of the package, and need not
% be read unless the package is doing something unexpected and you want to fix
% it.
%
%
% \subsection{Finding Module Files}
%
% \DescribeMacro\mbk@import@newmod \marg{module} \marg{filename}
%
% Imports where a module name is given.
%
%    \begin{macrocode}
\def\mbk@import@newmod#1#2{%
    \mbk@try@modfile{#1}{#2}%
    \mbk@try@file@default
    \PackageError{modbook}{No file `#1/#2.tex' found}{%
        Check that the file exists%
    }%
    \mbk@try@file@end
}
%    \end{macrocode}
%
% \DescribeMacro\mbk@import@nomod \marg{filename}
%
% Imports where no module name is given.
%
%    \begin{macrocode}
\def\mbk@import@nomod#1{%
    \mbk@try@modfile{\mbk@module@cur}{#1}%
    \mbk@try@modfile{#1}{#1}%
    \mbk@try@file@default
    \PackageError{modbook}{No file `#1.tex' found}{Check that the file exists}%
    \mbk@try@file@end
}
%    \end{macrocode}
%
% \DescribeMacro\mbk@try@modfile \marg{module} \marg{filename}
%
% Tries to find a module file, across all the repositories.
%
%    \begin{macrocode}
\def\mbk@try@modfile#1#2{%
    \expandafter\mbk@try@modfile@\mbk@repo@path,\@nil{#1}{#2}%
}
\def\mbk@try@modfile@#1,#2\@nil#3#4{%
    \mbk@try@file{#1/#3/#4}{%
        \mbk@module@push{#3}%
        \mbk@register@file{#3}{#4}%
        \def\mbk@current@file{#4}%
        \mbk@formatting@for{#4}%
        \@@input #1/#3/#4 %
        \mbk@module@pop
    }%
    \ifstrempty{#2}{}{\mbk@try@modfile@#2\@nil{#3}{#4}}%
}
%    \end{macrocode}
%
% \subsection{Tracking the Current Module and File}
%
% Module imports are tracked via a stack, so it is always possible to know which
% module is in current use. (The normal TeX grouping mechanism cannot be used,
% because otherwise content would be included inside groups.)
%
% \DescribeMacro\mbk@module@cur
% The current module.
%
%    \begin{macrocode}
\def\mbk@module@cur{}
%    \end{macrocode}
%
% \DescribeMacro\mbk@current@file
% The current file.
%    \begin{macrocode}
\let\mbk@current@file\relax
%    \end{macrocode}
%
% \DescribeMacro\mbk@module@stack
% The stack of module inclusions. The list is comma-separated and always ends in
% a comma.
%
%    \begin{macrocode}
\def\mbk@module@stack{,}
%    \end{macrocode}
%
% \DescribeMacro\mbk@module@push \marg{module}
%
% Push a module onto the stack.
%
%    \begin{macrocode}
\def\mbk@module@push#1{\gpreto\mbk@module@stack{#1,}\edef\mbk@module@cur{#1}}
%    \end{macrocode}
%
%
% \DescribeMacro\mbk@module@pop
% Delete a module from the stack. If one tries to pop the last module from the
% stack, this macro will generate an argument error (there won't be enough
% commas).
%
%    \begin{macrocode}
\def\mbk@module@pop{%
    \expandafter\mbk@module@pop@\mbk@module@stack\@stop
}
\def\mbk@module@pop@#1,#2,#3\@stop{%
    \gdef\mbk@module@stack{#2,#3}%
    \gdef\mbk@module@cur{#2}%
}
%    \end{macrocode}
%
%
%
% \subsection*{Implementation: File Inclusion}
%
% \DescribeMacro\mbk@try@file \marg{filename} \marg{content}
%
% Tries including a file among several. Several |\mbk@try@file| commands may be
% included in sequence, terminated with |\mbk@try@file@end|. If the file exists,
% then \marg{content} is inserted and any other material up to
% |\mbk@try@file@end| will be discarded.
%
%    \begin{macrocode}
\def\mbk@try@file#1#2{%
    \openin\@inputcheck"#1"
    \@test\ifeof\@inputcheck\fi{}{%
        \closein\@inputcheck
        \mbk@try@file@use{#2}%
    }%
}
\def\mbk@try@file@use#1#2\mbk@try@file@end{#1}
%    \end{macrocode}
%
% \DescribeMacro\mbk@try@file@default \marg{content} \cs{mbk@try@file@end}
%
% What to do if no |\mbk@try@file| commands succeed. All material up to
% |\mbk@try@file@end| is used.
%
%    \begin{macrocode}
\def\mbk@try@file@default#1\mbk@try@file@end{#1}%
\let\mbk@try@file@end\@empty
%    \end{macrocode}
%
%
% \subsection{Cross-Reference Checking}
%
% \DescribeMacro\mbk@register@file\marg{module} \marg{filename}
%
% To implement cross-reference checking, every file is ``registered'' at
% the time it is imported. The registration confirms any assertions that can be
% determined upon registration, and records information for further checking.
%
%    \begin{macrocode}
\def\mbk@register@file#1#2{%
    \def\reserved@a{#2}%
    \ifx\mbk@expectnext\relax\else
        \ifx\reserved@a\mbk@expectnext\else
            \def\reserved@a{#1#2}%
            \ifx\reserved@a\mbk@expectnext\else
                \PackageWarning{modbook}{%
                    In file `\mbk@current@file',^^J%
                    file `\mbk@expectnext' should have been included here,^^J%
                    but `#1#2' was included instead%
                }%
                \G@refundefinedtrue
            \fi
        \fi
        \global\let\mbk@expectnext\relax
    \fi
    \global\@namedef{mbk@reg@#1#2}{}%
    \global\@namedef{mbk@reg@#2}{}%
    \immediate\write\@auxout{%
        \string\mbk@register@pre{#1#2}%
        \string\mbk@register@pre{#2}%
    }%
}
%    \end{macrocode}
%
% \DescribeMacro\mbk@register@pre\marg{filename}
%
% Marks that a file will be included at a later time.
%
%    \begin{macrocode}
\def\mbk@register@pre#1{%
    \global\@namedef{mbk@preg@#1}{}%
}
%    \end{macrocode}
%
%
% \subsection{Fonts}
%
% \DescribeMacro\@defaultfamilyhook
% This code hooks into the \LaTeX\ command that resets the default font, forcing
% editorial or reading font selection every time the font is reset.
%
%    \begin{macrocode}
\ifx\@defaultfamilyhook\@empty
    \def\@defaultfamilyhook{%
        \ifedmaterial \edfont \else \readingfont \fi
    }%
\else
    \PackageError{modbook}{%
        \noexpand\@defaultfamilyhook already defined%
    }{Check the package}%
\fi
%    \end{macrocode}
%
%
% \DescribeMacro\mbk@formatting@for \marg{filename}
%
% Selects the font based on the filename.
%
%    \begin{macrocode}
\def\mbk@formatting@for#1{%
    \find@try\find@in{%
        {intro-}{\edfont\@gobbletwo}%
        {narrative-}{\edfont\@gobbletwo}%
        {-qs}{\edfont\@gobbletwo}%
    }{#1}{\readingfont}%
}
\make@find@in{intro-}
\make@find@in{narrative-}
\make@find@in{-qs}
%    \end{macrocode}
%
% \DescribeEnv{quotation}
% \DescribeEnv{quote}
% Redefine the \env{quote} and \env{quotation} environments to use the reading
% font.
%
%    \begin{macrocode}
\renewenvironment{quotation}
               {\readingfont\list{}{\listparindent 1.5em%
                        \itemindent    \listparindent
                        \rightmargin   \leftmargin
                        \parsep        \z@ \@plus\p@}%
                \item\relax}
               {\endlist}
\renewenvironment{quote}
               {\readingfont\list{}{\rightmargin\leftmargin}%
                \item\relax}
               {\endlist}
%    \end{macrocode}
%
%
%
%
%
% \subsection{Document-Level Structure}
%
% The introduction of readings as a document section type requires some
% modifications to the usual \LaTeX\ document structure.
%
% First, the package creates a new running head format, where the chapter name
% is placed on the left and the current reading is placed on the right.
%
%    \begin{macrocode}
\def\ps@modbook{%
    \let\@oddfoot\@empty\let\@evenfoot\@empty
    \def\@evenhead{%
        {\mbk@page@headerfont{\thepage}}%
        \hfil
        {\mbk@left@headerfont{\leftmark}}%
    }%
    \def\@oddhead{%
        {\mbk@right@headerfont{\rightmark}}%
        \hfil
        {\mbk@page@headerfont{\thepage}}%
    }%
    \let\@mkboth\markboth
    \def\chaptermark##1{%
        \markboth{%
            \ifnum \c@secnumdepth >\m@ne
                \if@mainmatter \@chapapp\ \thechapter. \ \fi
            \fi
            ##1%
        }{}%
    }%
    \def\sectionmark##1{%
        \markright {%
            \ifnum \c@secnumdepth >\z@ \thesection. \ \fi
            ##1%
        }%
    }%
    \def\subsectionmark##1{%
        \markright {%
            \ifnum \c@secnumdepth >\z@ \thesubsection. \ \fi
            ##1%
        }%
    }%
    \def\readingmark##1{\markright{##1}}%
}
\pagestyle{modbook}
%    \end{macrocode}
%
% Page numbers on plain-styled pages (e.g., beginnings of chapters) are also
% modified accordingly.
%
%    \begin{macrocode}
\def\ps@plain{%
    \let\@mkboth\@gobbletwo
    \let\@oddhead\@empty
    \def\@oddfoot{%
        \reset@font\hfil
        {\mbk@page@headerfont{\thepage}}%
        \hfil
    }%
    \let\@evenhead\@empty\let\@evenfoot\@oddfoot
}
%    \end{macrocode}
%
% When a chapter ends, a blank page may be inserted on the left side. Ensure
% that this page has no header.
%
%    \begin{macrocode}
\def\cleardoublepage{%
    \clearpage
    \if@twoside
        \ifodd\c@page\else
            \hbox{}\thispagestyle{empty}\newpage
            \if@twocolumn\hbox{}\newpage\fi
        \fi
    \fi
}
%    \end{macrocode}
%
% Readings are section level 4, and paragraphs/subparagraphs are placed below
% that level. Numbering continues up through level 3 (i.e., readings are not
% numbered), and the Table of Contents includes readings.
%
%    \begin{macrocode}
\setcounter{secnumdepth}{3}
\setcounter{tocdepth}{4}
\patchcmd\@makechapterhead{\normalfont}{\normalfont\mbk@section@font}{}{%
    \PackageError{modbook}{Failed to patch \string\@makechapterhead}{}%
}
\def\@part[#1]#2{%
    \ifnum \c@secnumdepth >-2\relax
      \refstepcounter{part}%
      \addcontentsline{toc}{part}{\thepart\hspace{1em}#1}%
    \else
      \addcontentsline{toc}{part}{#1}%
    \fi
    \markboth{}{}%
    {\centering
     \interlinepenalty \@M
     \normalfont\mbk@section@font
     \ifnum \c@secnumdepth >-2\relax
       \huge\bfseries \partname\nobreakspace\thepart
       \par
       \vskip 20\p@
     \fi
     \Huge \bfseries #2\par}%
    \@endpart}
\def\@spart#1{%
    {\centering
     \interlinepenalty \@M
     \normalfont\mbk@section@font
     \Huge \bfseries #1\par}%
    \@endpart}
\renewcommand\section{\@startsection {section}{1}{\z@}%
           {3.5ex \@plus 1ex \@minus .2ex}%
           {2.3ex \@plus.2ex}%
           {\mbk@section@font\raggedright\Large\bfseries}}
\renewcommand\subsection{\@startsection{subsection}{2}{\z@}%
         {3.25ex\@plus 1ex \@minus .2ex}%
         {1.5ex \@plus .2ex}%
         {\mbk@section@font\raggedright\large\bfseries}}
\renewcommand\subsubsection{\@startsection{subsubsection}{3}{\z@}%
         {3.25ex\@plus 1ex \@minus .2ex}%
         {1.5ex \@plus .2ex}%
         {\mbk@section@font\raggedright\large\itshape}}
\renewcommand\paragraph{\@startsection{paragraph}{5}{\parindent}%
        {\z@}%
        {-1em}%
        {\normalsize\bfseries\aftergroup\mbk@parsep}}
\renewcommand\subparagraph{\@startsection{subparagraph}{6}{\parindent}%
       {3.25ex \@plus1ex \@minus .2ex}%
       {-1em}%
      {\normalfont\normalsize\bfseries}}
\def\mbk@parsep{.}
\renewcommand*\l@paragraph{\@dottedtocline{5}{10em}{5em}}
\renewcommand*\l@subparagraph{\@dottedtocline{6}{12em}{6em}}
%    \end{macrocode}
%
%
%
% \section{Options}
%
% With the option |readingnotenums|, numbering will not contain chapter numbers
% and will be consecutive for each block of notes (as is traditional in
% casebooks).
%
% With the option |chapternotenums|, notes will have the form
% \meta{chapter}.\meta{note} and will run consecutively through the chapter. So
% if the first reading of chapter 7 has four notes, then the first note of the
% second reading will be 7.5. This is probably better for cross-referencing
% notes throughout the book, since the notes are uniquely identified.
%
%    \begin{macrocode}
\newif\if@chapternotenums
\DeclareOption{chapternotenums}{\@chapternotenumstrue}
\DeclareOption{readingnotenums}{\@chapternotenumsfalse}
%    \end{macrocode}
%
% By default, |readingnotenums| is used.
%
%    \begin{macrocode}
\ExecuteOptions{readingnotenums}
\ProcessOptions
%    \end{macrocode}
%
%
%
% \section{Supporting Packages}
%
% \iffalse
%</package>
%<*deferral>
% \fi
%
%
% \subsection{Deferrals}
%
% Provides functions for deferring certain text to a later point in a document,
% with specified template formatting.
%
% With this package, one defines one or more ``deferral classes'' by name. The
% user adds items to a deferral class, and then may use the deferral class by
% printing it out. Upon printing, the items of the deferral class can be altered
% by a per-item macro, and the deferral class can surround all the items with
% text such as environment |\begin| and |\end| commands.
%
%    \begin{macrocode}
\ProvidesPackage{deferral}[03/10/2024 Deferred text]
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% \DescribeMacro\NewDeferral\marg{class-name}
%
% Creates a new deferred text class. \#1 is the name of the class.
%
%    \begin{macrocode}
\def\NewDeferral#1{%
    \global\cslet{dfr@list@#1}\@empty
    \DeferralSurround{#1}{}{}%
    \DeferralMacro{#1}{##1}%
}
%    \end{macrocode}
%
% \DescribeMacro\DeferralSurround \marg{class}\marg{pre-text}\marg{post-text}
%
% Sets the text to be placed before and after the deferred text class when it is
% displayed.
%
%    \begin{macrocode}
\def\DeferralSurround#1#2#3{%
    \global\@namedef{dfr@pre@#1}{#2}%
    \global\@namedef{dfr@post@#1}{#3}%
}
%    \end{macrocode}
%
% \DescribeMacro\DeferralMacro\marg{class}\marg{macro-def}
%
% Defines a macro for processing the deferred matter.
% The \meta{macro-def} is the macro definition, which should use ``\#1'' to
% reference each deferred item.
%
%    \begin{macrocode}
\def\DeferralMacro#1{%
    \global\@namedef{dfr@mac@#1}##1%
}
%    \end{macrocode}
%
% \DescribeMacro\deferral\marg{class}\marg{text}
%
% Adds an item \meta{text} to the deferral class.
%
%    \begin{macrocode}
\def\deferral#1#2{%
    \listcsgadd{dfr@list@#1}{#2}%
}
%    \end{macrocode}
%
% \DescribeMacro\UseDeferral\marg{class}
%
% Uses the deferred matter. This will (1) print the class pre-text, (2) run the
% class macro on each item, and (3) print the class post-text. The deferred
% matter will then be cleared. If there are no deferred items for this class,
% then nothing is produced at all (not even the pre- and post-text).
%
%    \begin{macrocode}
\def\UseDeferral#1{%
    \expandafter\dfr@use\csname dfr@list@#1\endcsname{#1}%
}
\def\dfr@use#1#2{%
    \ifx#1\@empty\else
        \csname dfr@pre@#2\endcsname
        \forlistloop{\csname dfr@mac@#2\endcsname}{#1}%
        \csname dfr@post@#2\endcsname
        \global\let#1\@empty
    \fi
}
%    \end{macrocode}
%
% \iffalse
%</deferral>
%<*multichoice>
% \fi
%
% \subsection{Multiple Choice Questions}
%
% This package provides support for multiple choice question formatting. It
% depends on the deferral package. It may be used independently of |modbook|.
%
% A multiple choice question consists of a question text, a list of choices, an
% answer, and an explanation. The answer and explanation are stored in
% deferrals, while the question is formatted as a list item, with the choices
% formatted within a list environment.
%
% The package should be bundled with a script called |multichoice.rb|, which can
% be used to aid in writing multiple choice questions. To use the script,
% prepare a file of the form:
% \begin{quote}
% |Question: | \meta{question-text}
%
% |A: | \meta{choice-text}
%
% |B: | \meta{choice-text}
%
% \ldots
%
% |Answer: | \meta{correct-choice}|. | \meta{explanation}
%
% \relax[\emph{More questions may follow}]
% \end{quote}
% The file should be \TeX-formatted (and may use \LaTeX\ commands), with
% paragraphs separated by a blank line and starting with a word followed by a
% colon. Answer choices must be a single letter; the other permissible words
% before a comma are ``Question'' and ``Answer''. For example:
% \begin{verbatim}
% Question: What is 1 + 1?
%
% A: 2
%
% B: 15
%
% C: 10 in binary
%
% D: (A) and (C)
%
% E: All of the above
%
% Answer: D. The sum of one and one is typically represented with
% the digit 2 in the decimal system, but is also 10 in binary as
% specified in (C). Fifteen (B) is plainly incorrect.
% \end{verbatim}
% The answer choices and the explanation may cross-reference other
% answer choices using letters in parentheses. Phrases like ``all of the above''
% or ``none of the above'' will also be identified as cross-referencing other
% choices. If an answer choice cross-references other choices, it \emph{must}
% follow other non-cross-referencing choices and \emph{must only}
% cross-reference choices presented before it.
% 
% Running the |multichoice.rb| script on this file will:
% \begin{itemize}
% \item Randomize the order of the choices. The cross-referencing choices will
% not be rearranged, but the others will.
%
% \item Update the correct answer, and all the cross-references, to reflect the
% randomized order of the choices. Parenthesized letters in the choices and
% explanation are replaced, and phrases of the form ``(A) and (B)'' and ``(C),
% (D), or (E)'' are automatically sorted to reflect the new choice order.
%
% \item Format the question using the |\multichoiceq| commmand below.
% \end{itemize}
% The resulting output file can then be used as a \LaTeX\ input file after the
% |multichoice| package is loaded.
%
%
%    \begin{macrocode}
\ProvidesPackage{multichoice}[2024/03/10 Multiple choice questions]
\RequirePackage{deferral}
%    \end{macrocode}
%
%
%
% \DescribeMacro\multichoiceq \marg{question}\marg{choices}\marg{answer}%
% \marg{explanation}
%
% Formats a multiple choice question. The assumption is that this macro is
% called within some sort of list, such that each question can be preceded with
% an |\item| command.
%
% If the |deferqs| option was selected (see below), then questions will be
% placed in a deferral.
%
%    \begin{macrocode}
\def\multichoiceq#1#2#3#4{%
    \if@mch@deferqs
        \deferral{mch@questions}{\mch@multichoiceq{#1}{#2}{#3}{#4}}%
    \else
        \mch@multichoiceq{#1}{#2}{#3}{#4}%
    \fi
}
\def\mch@multichoiceq#1#2#3#4{%
    \item
    \expandafter\mch@deferrals\expandafter{\@currentlabel}{#3}{#4}%
    #1
    \begin{choices}#2\end{choices}%
}
\NewDeferral{mch@questions}
%    \end{macrocode}
%
% Saves the current question number, the correct answer, and the question to
% deferrals. Two deferrals are stored: an answer key that just contains the
% question number and correct answer, and an explanation key that also includes
% the explanation. \#1 is the question number,
% \#2 the correct answer, \#3 the explanation.
%
%    \begin{macrocode}
\def\mch@deferrals#1#2#3{%
    \deferral{mch@key}{\item[#1.] #2}%
    \deferral{mch@answers}{\multichoicea{#1}{#2}{#3}}%
}
\NewDeferral{mch@key}
\NewDeferral{mch@answers}
%    \end{macrocode}
%
%
%
% \DescribeMacro\showquestions
% If questions are placed in a deferral, then this command will display the
% questions. By default, they will be placed in a |multichoice| environment. To
% change this, run |\DeferralSurround{mch@questions}|.
%
%    \begin{macrocode}
\def\showquestions{\UseDeferral{mch@questions}}
\DeferralSurround{mch@questions}{\begin{multichoice}}{\end{multichoice}}
%    \end{macrocode}
%
%
% \DescribeMacro\multichoiceitem\marg{label}\marg{text}
%
% Displays one of the choices to a multiple choice question. The assumption is
% that this occurs within a list environment (a choices environment in view of
% the definition of |\multichoiceq|).
%
% The \meta{label} should be the letter of the answer choice. It will be
% parenthesized by the macro.
%
%    \begin{macrocode}
\def\multichoiceitem#1#2{%
    \item[(#1)] #2%
}
%    \end{macrocode}
%
% \DescribeEnv{choices}
% An environment for multiple choice question choices. This environment will be
% invoked automatically by |\multichoiceq|.
%
%    \begin{macrocode}
\def\choices{%
    \list{%
        \PackageError{multichoice}{Choice item cannot be implicit}{%
            Ensure you are using \string\multichoiceitem
        }%
    }{%
        \def\makelabel##1{##1\hss}%
        \leftmargin=4em\relax
        \itemsep=\z@
        \samepage
    }%
}
\let\endchoices\endlist
%    \end{macrocode}
%
% \DescribeMacro\multichoicea\marg{number}\marg{answer}\marg{explanation}
%
% Display an answer. The assumption is that this is inside a list environment so
% |\item| can be used; the question number will be given as the item.
%
% This macro will automatically be invoked by |\multichoiceq|, but it may be
% redefined to provide for alternate formatting of answers.
%
%    \begin{macrocode}
\def\multichoicea#1#2#3{%
    \item[#1] \textbf{#2.}\quad#3%
}
%    \end{macrocode}
%
% \DescribeMacro\answerkey
% Produce the answer key.
%
%    \begin{macrocode}
\def\answerkey{\UseDeferral{mch@key}}
%    \end{macrocode}
%
% \DescribeMacro\explanations
% Produce the explanations.
%
%    \begin{macrocode}
\def\explanations{\UseDeferral{mch@answers}}
%    \end{macrocode}
%
% \DescribeEnv{multichoice}
% An environment for questions and answers. This environment is not required for
% use; |\multichoiceq| will work with a standard enumerate environment. However,
% it provides formatting that generally looks preferable for text-heavy multiple
% choice questions.
%
%    \begin{macrocode}
\newcounter{mcnum}
\def\themcnum{\@arabic\c@mcnum}
\newenvironment{multichoice}{%
    \list{\arabic{mcnum}}{%
        \usecounter{mcnum}%
        \def\makelabel##1{\textbf{##1.}\quad}%
        \itemindent=\z@
        \itemsep=\baselineskip
        \labelsep=\z@
        \labelwidth=\z@
        \leftmargin=\z@
        \listparindent=\parindent
        \parsep=\parskip
        \partopsep=\z@
        \topsep=\z@
        \@beginparpenalty=\@M
        \@itempenalty=\z@
        \@endparpenalty=\z@
    }%
}{\endlist}
%    \end{macrocode}
%
%
%
% The option |deferqs| will place all questions into a deferral for later
% printing. The option |immediateqs| will display questions immediately.
%
%    \begin{macrocode}
\newif\if@mch@deferqs
\DeclareOption{deferqs}{\@mch@deferqstrue}
\DeclareOption{immediateqs}{\@mch@deferqsfalse}
%    \end{macrocode}
%
% By default, questions are displayed immediately.
%
%    \begin{macrocode}
\ExecuteOptions{immediateqs}
\ProcessOptions
%    \end{macrocode}
%
% \iffalse
%</multichoice>
% \fi
%
% \Finale
%
